/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.wulkanat.dcc.language.lexer;

import com.github.wulkanat.dcc.language.DccLineMarkerProvider;import com.github.wulkanat.dcc.language.psi.DccTypes;

import com.intellij.psi.TokenType;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import jdk.nashorn.internal.parser.Token;
import com.github.wulkanat.dcc.language.psi.DccTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>dcc.flex</tt>
 */
class DccLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17392 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\1\14\1\15\1\16\3"+
    "\0\1\17\1\20\1\21\1\22\2\10\1\23\3\10\1\23\71\10\1\24\1\10\1\25\1\26\1\27"+
    "\1\30\2\26\16\0\1\31\1\32\1\33\1\34\2\10\1\35\11\10\1\36\21\10\1\37\1\40\24"+
    "\10\1\41\3\10\1\23\1\42\1\41\4\10\1\43\1\44\4\0\1\45\1\46\1\26\3\10\2\47\1"+
    "\26\1\50\1\51\1\0\1\52\5\10\1\53\3\0\1\54\1\55\13\10\1\56\1\45\1\57\1\60\1"+
    "\0\1\61\1\26\1\62\1\63\3\10\3\0\1\64\12\10\1\65\1\0\1\66\1\26\1\0\1\67\3\10"+
    "\1\53\1\70\1\22\2\10\1\65\1\71\1\72\1\73\2\26\3\10\1\74\1\10\1\47\6\26\2\10"+
    "\1\31\1\75\2\26\1\76\5\0\1\77\6\10\1\100\2\0\1\101\1\10\1\102\1\0\1\41\1\10"+
    "\1\103\1\104\1\105\2\10\1\106\1\107\1\110\1\111\1\112\1\62\1\113\1\102\1\0"+
    "\1\114\1\115\1\116\1\117\1\105\2\10\1\106\1\120\1\121\1\122\1\123\1\124\1"+
    "\125\1\126\1\0\1\127\1\26\1\116\1\36\1\35\2\10\1\106\1\130\1\110\1\45\1\131"+
    "\1\132\1\26\1\102\1\0\1\42\1\133\1\116\1\104\1\105\2\10\1\106\1\130\1\110"+
    "\1\111\1\123\1\126\1\113\1\102\1\0\1\42\1\26\1\134\1\135\1\136\1\137\1\115"+
    "\1\135\1\10\1\140\1\141\1\142\1\143\1\26\1\126\1\0\1\26\1\42\1\144\1\31\1"+
    "\106\2\10\1\106\1\10\1\145\1\146\1\142\1\147\1\47\1\102\1\0\2\26\1\103\1\31"+
    "\1\106\2\10\1\106\1\150\1\110\1\146\1\142\1\147\1\33\1\102\1\0\1\151\1\26"+
    "\1\144\1\31\1\106\4\10\1\152\1\146\1\153\1\154\1\43\1\102\1\0\1\26\1\40\1"+
    "\155\1\10\1\23\1\40\2\10\1\35\1\156\1\23\1\157\1\160\1\0\1\126\1\0\1\161\1"+
    "\26\1\41\5\10\1\162\1\163\1\164\1\165\1\0\1\166\4\26\1\167\1\170\1\171\1\41"+
    "\1\172\1\173\1\162\1\174\1\175\1\50\1\0\1\176\4\26\1\132\2\26\1\166\1\0\1"+
    "\166\1\177\1\200\1\10\1\41\3\10\1\27\1\44\1\0\1\146\1\201\1\0\1\44\3\0\1\202"+
    "\1\203\7\26\5\10\1\53\1\0\1\204\1\0\1\166\1\65\1\205\1\206\1\207\1\210\1\10"+
    "\1\211\1\212\1\0\1\50\4\10\1\36\1\21\5\10\1\213\51\10\1\136\1\23\1\136\5\10"+
    "\1\136\4\10\1\136\1\23\1\136\1\10\1\23\7\10\1\136\10\10\1\214\4\26\2\10\2"+
    "\26\12\10\2\75\1\41\114\10\1\104\2\10\1\41\2\10\1\47\11\10\1\135\1\10\1\132"+
    "\1\10\1\31\1\215\1\26\2\10\1\215\1\26\2\10\1\216\1\26\1\10\1\31\1\217\1\26"+
    "\6\10\1\220\3\0\1\221\1\222\1\0\1\166\3\26\1\223\1\0\1\166\13\10\1\26\1\224"+
    "\4\10\1\225\10\10\1\75\1\26\3\10\1\23\1\0\1\2\1\0\1\2\1\126\1\0\3\10\1\75"+
    "\1\27\1\26\5\10\1\114\3\10\1\25\1\0\1\166\4\26\2\10\1\164\1\2\6\10\1\201\1"+
    "\165\3\0\1\111\1\0\1\166\1\0\1\166\1\43\1\26\1\0\1\50\10\26\1\226\5\10\1\220"+
    "\1\0\1\226\1\114\1\0\1\166\1\26\1\227\1\2\1\26\1\230\3\10\1\101\1\207\1\0"+
    "\1\67\4\10\1\65\1\0\1\2\1\26\4\10\1\220\2\0\1\26\1\0\1\231\1\0\1\67\3\10\1"+
    "\75\1\10\1\132\10\26\1\232\2\0\1\233\1\234\1\166\30\10\7\0\1\235\42\10\2\75"+
    "\4\10\2\75\1\10\1\236\3\10\1\75\6\10\1\31\1\175\1\237\1\27\1\240\1\114\1\10"+
    "\1\27\1\237\1\27\1\26\1\227\3\26\1\241\1\26\1\43\1\132\1\26\1\242\1\26\1\146"+
    "\1\0\1\42\1\43\2\26\1\10\1\27\4\10\2\26\1\0\1\202\1\243\1\0\1\244\1\26\1\245"+
    "\1\40\1\156\1\246\1\30\1\247\1\10\1\250\1\251\1\252\2\26\5\10\1\132\116\26"+
    "\5\10\1\23\5\10\1\23\20\10\1\27\1\253\1\254\1\26\4\10\1\36\1\21\7\10\1\43"+
    "\1\26\1\62\2\10\1\23\1\26\10\23\4\0\5\26\1\43\72\26\1\251\3\26\1\41\1\211"+
    "\1\246\1\27\1\41\11\10\1\23\1\255\1\41\12\10\1\213\1\251\4\10\1\23\1\41\12"+
    "\10\1\23\2\26\3\10\1\47\6\26\170\10\1\75\11\26\75\10\1\47\2\26\21\10\1\27"+
    "\10\26\5\10\1\75\41\10\1\27\2\10\1\0\1\254\2\26\5\10\1\164\1\76\1\256\3\10"+
    "\1\65\12\10\1\166\3\26\1\43\1\10\1\40\14\10\1\105\3\10\1\23\1\10\7\26\1\43"+
    "\1\10\1\257\1\260\2\10\1\53\2\26\1\132\6\10\1\114\1\26\1\67\5\10\1\220\1\0"+
    "\1\50\1\26\1\0\1\166\2\0\1\67\1\261\1\0\1\67\2\10\1\65\1\50\2\10\1\164\1\0"+
    "\1\2\1\26\3\10\1\27\1\77\5\10\1\53\1\0\1\244\1\43\1\0\1\166\1\262\1\10\1\0"+
    "\1\263\5\10\1\101\1\165\1\26\1\260\1\264\1\0\1\166\2\10\1\23\1\265\6\10\1"+
    "\206\1\266\1\225\2\26\1\267\1\10\1\53\1\270\1\26\3\271\1\26\2\23\5\10\1\213"+
    "\1\75\1\26\16\10\1\53\1\272\1\0\1\166\64\10\1\114\1\26\2\10\1\23\1\273\5\10"+
    "\1\114\40\26\55\10\1\75\15\10\1\25\4\26\1\23\1\26\1\273\1\274\1\10\1\106\1"+
    "\23\1\175\1\275\15\10\1\25\3\26\1\273\54\10\1\75\2\26\10\10\1\40\6\10\5\26"+
    "\1\10\1\27\2\0\2\26\2\0\1\115\2\26\1\251\3\26\1\42\1\31\20\10\1\276\1\242"+
    "\1\26\1\0\1\166\1\41\2\10\1\117\1\41\2\10\1\47\1\277\12\10\1\23\3\40\1\300"+
    "\1\301\2\26\1\302\1\10\1\150\2\10\1\23\2\10\1\303\1\10\1\75\1\10\1\75\4\26"+
    "\17\10\1\47\10\26\6\10\1\27\20\26\1\304\20\26\3\10\1\27\6\10\1\132\1\26\1"+
    "\244\3\26\4\10\1\26\1\251\3\10\1\47\4\10\1\65\1\305\3\10\1\75\4\10\1\114\1"+
    "\10\1\246\5\26\23\10\1\75\1\0\1\166\4\10\1\114\4\10\1\114\5\10\1\26\6\10\1"+
    "\114\23\26\46\10\1\23\1\26\2\10\1\75\1\26\1\10\23\26\1\75\1\106\4\10\1\36"+
    "\1\306\2\10\1\75\1\26\2\10\1\23\1\26\3\10\1\23\10\26\2\10\1\307\1\26\2\10"+
    "\1\75\1\26\3\10\1\25\10\26\7\10\1\277\10\26\1\310\1\76\1\150\1\41\2\10\1\114"+
    "\1\122\4\26\3\10\1\27\3\10\1\27\4\26\1\10\1\41\2\10\1\311\3\26\6\10\1\75\1"+
    "\26\2\10\1\75\1\26\2\10\1\47\1\26\2\10\1\25\15\26\11\10\1\132\6\26\6\10\1"+
    "\47\1\26\6\10\1\47\41\26\1\230\6\10\1\0\1\165\3\26\1\126\1\0\1\26\1\62\1\230"+
    "\5\10\1\0\1\312\2\26\3\10\1\132\1\0\1\166\1\230\3\10\1\164\1\0\1\146\1\0\2"+
    "\26\4\10\1\313\1\26\1\230\5\10\1\53\1\0\1\314\1\315\1\0\1\316\4\26\2\10\1"+
    "\35\2\10\1\220\1\0\1\203\10\26\1\23\1\247\1\10\1\36\1\10\1\132\5\10\1\164"+
    "\1\0\1\305\1\0\1\166\1\144\1\104\1\105\2\10\1\106\1\130\1\110\1\111\1\123"+
    "\1\143\1\251\1\102\2\202\21\26\6\10\1\201\1\0\1\204\1\47\1\0\1\166\4\26\6"+
    "\10\2\0\1\317\1\26\1\0\1\166\24\26\5\10\1\164\1\50\1\0\1\244\2\26\1\264\4"+
    "\26\6\10\2\0\1\320\1\26\1\0\1\166\4\26\5\10\1\53\1\0\1\26\1\0\1\166\6\26\3"+
    "\10\1\321\1\0\1\2\1\0\1\166\54\26\10\10\1\0\1\166\1\26\1\43\40\26\1\101\1"+
    "\230\4\10\1\53\1\322\1\62\1\26\1\101\1\77\4\10\1\240\1\211\1\0\1\166\4\26"+
    "\7\10\1\132\40\26\1\10\1\106\3\10\1\164\1\165\1\0\1\132\1\26\1\0\1\166\2\26"+
    "\1\40\3\10\1\323\2\0\1\44\1\165\11\26\1\23\1\35\4\10\1\324\1\325\1\212\1\26"+
    "\1\0\1\166\24\26\63\10\1\25\14\26\15\10\1\23\2\26\30\10\1\114\27\26\5\10\1"+
    "\23\72\26\10\10\1\23\67\26\7\10\1\132\3\10\1\23\1\0\1\166\14\26\3\10\1\75"+
    "\1\202\1\26\6\10\1\165\1\26\1\114\1\26\1\0\1\166\1\273\2\10\1\251\2\10\56"+
    "\26\10\10\1\27\1\26\1\101\4\0\1\165\1\26\1\62\1\230\1\10\10\26\1\25\3\26\75"+
    "\10\1\27\2\26\36\10\1\47\41\26\43\10\1\23\12\26\61\10\1\114\40\26\15\10\1"+
    "\47\1\10\1\27\1\10\1\132\1\10\1\326\1\2\127\26\1\327\1\330\2\0\1\331\1\2\3"+
    "\26\1\332\22\26\1\315\67\26\12\10\1\31\10\10\1\31\1\333\1\334\1\10\1\335\1"+
    "\150\7\10\1\36\1\336\2\31\3\10\1\337\1\175\1\40\1\106\51\10\1\75\3\10\1\106"+
    "\2\10\1\213\3\10\1\213\2\10\1\31\3\10\1\31\2\10\1\23\3\10\1\23\3\10\1\106"+
    "\3\10\1\106\2\10\1\213\1\340\14\0\1\165\1\227\5\0\1\202\1\304\1\26\1\341\2"+
    "\26\1\227\1\44\1\0\52\26\1\165\2\0\1\342\1\343\1\305\72\26\30\10\1\27\1\26"+
    "\1\165\5\26\10\10\1\220\1\305\1\0\1\166\24\26\1\150\3\10\1\167\1\41\1\213"+
    "\1\344\1\245\1\345\1\167\1\236\1\167\2\213\1\125\1\10\1\35\1\10\1\114\1\346"+
    "\1\35\1\10\1\114\50\26\32\10\1\23\5\26\106\10\1\27\1\26\33\10\1\75\120\10"+
    "\1\25\1\26\146\10\1\132\3\26\3\10\1\75\74\26\1\124\3\26\14\0\20\26\36\0\2"+
    "\26");

  /* The ZZ_CMAP_A table has 1848 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\7\1\4\1\2\1\1\1\5\1\3\6\7\4\0\1\4\1\62\1\0\1\57\1\6\1\47\1\63\1\0\1\51"+
    "\1\52\1\12\1\32\1\44\1\46\1\30\1\11\12\27\1\50\1\45\1\60\1\26\1\61\1\65\1"+
    "\0\4\6\1\31\15\6\1\55\1\0\1\56\1\0\1\6\1\0\1\34\1\6\1\23\1\15\1\20\1\21\1"+
    "\6\1\37\1\25\1\6\1\43\1\17\1\13\1\22\1\14\1\40\1\6\1\33\1\35\1\24\1\16\1\36"+
    "\1\42\1\6\1\41\1\6\1\53\1\64\1\54\1\0\6\7\1\10\2\7\2\0\4\6\4\0\1\6\2\0\1\7"+
    "\7\0\1\6\4\0\1\6\5\0\7\6\1\0\2\6\4\0\4\6\16\0\5\6\7\0\1\6\1\0\1\6\1\0\5\6"+
    "\1\0\2\6\2\0\4\6\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6\1\0\4\6\1\0\13\6\1\0\3\6"+
    "\1\0\5\7\2\0\6\6\1\0\7\6\1\0\1\6\15\0\1\6\1\0\15\7\1\0\1\7\1\0\2\7\1\0\2\7"+
    "\1\0\1\7\3\6\5\0\6\7\5\0\1\6\4\0\3\7\1\0\1\7\3\0\3\6\7\7\4\0\2\6\1\7\13\6"+
    "\1\0\1\6\7\7\2\6\2\7\1\0\4\7\2\6\2\7\3\6\2\0\1\6\7\0\1\7\1\6\1\7\6\6\3\7\2"+
    "\0\11\6\3\7\1\6\6\0\2\7\6\6\4\7\2\6\2\0\2\7\1\6\11\7\1\6\3\7\1\6\5\7\2\0\1"+
    "\6\3\7\4\0\6\6\6\0\10\7\6\6\3\7\1\6\2\7\1\6\7\7\2\6\2\7\2\0\2\7\1\6\3\7\1"+
    "\0\10\6\2\0\2\6\2\0\6\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2"+
    "\0\3\7\1\6\5\0\2\6\1\0\5\6\7\0\2\6\4\0\3\7\1\0\6\6\4\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0\4\7\3"+
    "\6\1\7\2\0\1\6\1\0\2\6\1\0\3\6\2\7\1\0\3\7\2\0\1\6\10\0\1\6\6\7\2\0\1\7\1"+
    "\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\4\6\4\0\5\7\3\0\3\7\1\0\4\7"+
    "\2\0\1\6\6\0\5\7\1\0\5\6\3\0\1\6\7\7\1\0\2\7\5\0\2\7\1\0\4\6\1\0\3\6\1\0\2"+
    "\6\5\0\3\6\2\7\1\6\3\7\1\0\4\7\1\6\5\0\3\6\1\7\2\0\2\7\1\0\7\6\1\0\1\6\4\0"+
    "\1\7\4\0\6\7\1\0\1\7\3\0\2\7\4\0\1\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\2\7\7\0"+
    "\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2"+
    "\6\1\0\3\6\2\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\2\7\2\0\4\6\5\0\1\7\1\0\1\7"+
    "\1\0\1\7\4\0\2\7\5\6\10\7\11\0\1\7\1\0\7\7\1\6\2\7\4\6\3\7\1\6\3\7\2\6\7\7"+
    "\3\6\4\7\5\6\14\7\1\6\1\7\3\6\1\0\7\6\2\0\3\7\2\6\3\7\3\0\2\6\2\7\4\0\1\6"+
    "\1\0\2\7\4\0\4\6\10\7\3\0\1\6\3\0\2\6\1\7\5\0\4\7\1\0\5\6\2\7\2\6\1\7\1\6"+
    "\5\0\5\7\3\6\3\0\10\7\5\6\2\7\3\0\3\6\3\7\1\0\5\7\4\6\1\7\4\6\3\7\2\6\3\7"+
    "\1\0\5\7\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\2\0\3\6\1\0\6\6\2\0\2\6\2\1\5\7\5"+
    "\0\1\6\4\0\1\7\3\0\4\7\11\0\1\6\4\0\1\6\1\0\5\6\2\0\1\6\1\0\4\6\1\0\3\6\2"+
    "\0\4\6\5\0\5\6\4\0\1\6\4\0\4\6\3\7\2\6\5\0\2\7\2\0\3\6\6\7\1\0\3\6\1\7\3\6"+
    "\1\7\4\6\1\7\4\6\3\0\1\6\1\0\1\6\2\0\5\6\1\7\2\6\2\7\5\6\1\0\4\6\2\7\4\0\1"+
    "\6\3\7\2\6\1\7\5\6\2\7\3\0\3\6\4\0\3\6\2\7\2\0\6\6\1\0\3\7\1\0\2\7\5\0\5\6"+
    "\5\0\1\6\1\7\3\6\1\0\2\6\1\0\7\6\2\0\1\7\6\0\2\6\2\0\3\6\3\0\2\6\3\0\2\6\2"+
    "\0\3\7\4\0\3\6\1\0\2\6\1\0\1\6\5\0\1\7\2\0\3\7\5\0\1\6\3\0\1\6\2\0\4\6\1\0"+
    "\2\6\2\0\1\6\3\7\1\0\2\7\1\0\5\6\2\7\1\0\3\7\2\0\1\7\2\0\3\6\1\7\2\0\1\6\1"+
    "\0\1\7\4\6\5\0\3\7\3\0\2\7\1\6\1\0\1\6\3\0\4\7\2\6\1\0\1\6\1\7\3\0\1\6\3\0"+
    "\2\6\3\0\5\7\1\6\4\7\3\0\6\7\1\6\6\7\3\0\1\7\1\0\2\7\1\0\1\7\2\6\3\0\2\7\6"+
    "\0\5\7\3\0\6\7\2\0\3\7\2\0\4\7\4\0\1\6\2\0\2\6\2\0\4\6\1\0\4\6\1\0\1\6\1\0"+
    "\6\6\2\0\5\6\1\0\4\6\1\0\4\6\2\0\2\7\4\0\1\7\3\0\1\7\2\0\7\7\1\0\2\7\1\0\2"+
    "\7\1\0\1\6\1\0\1\6\5\0\1\6\1\0\1\6\1\0\3\6\1\0\3\6\1\0\3\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\3\1\4\1\5\1\6\3\4"+
    "\1\7\1\10\1\11\1\12\3\4\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\2\1\1\32\1\2\1\3"+
    "\1\5\4\0\1\33\1\34\5\4\1\35\1\0\1\10"+
    "\3\4\1\36\1\37\1\40\1\41\1\42\1\43\1\0"+
    "\1\33\5\0\1\34\1\44\1\45\4\4\1\10\1\0"+
    "\1\46\1\47\2\4\1\0\1\33\10\0\2\44\1\4"+
    "\1\50\1\51\1\52\1\53\1\54\1\0\3\33\5\0"+
    "\1\34\1\0\1\55\3\0\1\33\1\0\2\33\1\56"+
    "\2\33\1\0\1\56\7\0\1\56\2\0\2\33\5\0"+
    "\2\33\5\0\2\33\4\0\1\56\1\33\1\56\1\0"+
    "\1\56\1\0\1\33\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u0144\0\u01b0\0\u01e6\0\u010e\0\u021c\0\u0252\0\u0288\0\u02be"+
    "\0\u02f4\0\u032a\0\u010e\0\u0360\0\u0396\0\u03cc\0\u010e\0\u010e"+
    "\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e"+
    "\0\u010e\0\u010e\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u010e"+
    "\0\u0510\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654"+
    "\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u010e\0\u07ce"+
    "\0\u0804\0\u083a\0\u0870\0\u08a6\0\u010e\0\u010e\0\u010e\0\u010e"+
    "\0\u010e\0\u010e\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea"+
    "\0\u0a20\0\u0a56\0\u0a8c\0\u01b0\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64"+
    "\0\u0b9a\0\u0b9a\0\u01b0\0\u01b0\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72"+
    "\0\u0ca8\0\u0cde\0\u0d14\0\u010e\0\u0d4a\0\u0d4a\0\u0a20\0\u0d80"+
    "\0\u0db6\0\u010e\0\u0dec\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0"+
    "\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c"+
    "\0\u0fd2\0\u010e\0\u1008\0\u01b0\0\u103e\0\u1074\0\u10aa\0\u10e0"+
    "\0\u1116\0\u114c\0\u1182\0\u0912\0\u11b8\0\u11ee\0\u1224\0\u010e"+
    "\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u0c3c"+
    "\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e"+
    "\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe"+
    "\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u0e58\0\u1878"+
    "\0\u0efa\0\u18ae\0\u103e\0\u18e4\0\u191a\0\u1950\0\u1986";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\2\7\1\10\1\11\1\7\1\12\1\6\1\7"+
    "\1\13\1\14\6\12\1\15\1\16\1\12\1\17\1\12"+
    "\1\20\1\21\1\22\1\12\1\23\3\12\1\24\1\25"+
    "\2\12\1\26\1\12\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\6\1\7\1\51"+
    "\1\10\1\52\1\51\1\12\1\6\1\7\1\53\1\14"+
    "\6\12\1\15\1\16\1\12\1\17\1\12\1\20\1\21"+
    "\1\22\1\12\1\23\3\12\1\24\1\25\2\12\1\26"+
    "\1\12\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\6\5\11\2\6\1\11\55\6"+
    "\2\0\1\4\1\0\2\4\3\0\1\54\74\0\1\55"+
    "\1\0\1\56\3\0\1\57\126\0\5\11\2\0\1\11"+
    "\56\0\1\11\1\7\3\11\2\0\1\11\63\0\3\12"+
    "\2\0\13\12\1\0\1\12\1\0\1\12\1\0\11\12"+
    "\33\0\1\60\1\61\61\0\3\12\2\0\3\12\1\62"+
    "\7\12\1\0\1\12\1\0\1\12\1\0\1\12\1\63"+
    "\7\12\30\0\3\12\2\0\3\12\1\64\7\12\1\0"+
    "\1\12\1\0\1\12\1\0\11\12\30\0\3\12\2\0"+
    "\13\12\1\0\1\12\1\0\1\12\1\0\1\65\5\12"+
    "\1\66\2\12\50\0\1\67\57\0\1\70\6\0\1\21"+
    "\1\71\1\70\63\0\1\71\44\0\3\12\2\0\13\12"+
    "\1\0\1\12\1\0\1\12\1\0\1\12\1\72\7\12"+
    "\30\0\3\12\2\0\5\12\1\73\5\12\1\0\1\12"+
    "\1\0\1\12\1\0\11\12\30\0\3\12\2\0\5\12"+
    "\1\74\5\12\1\0\1\12\1\0\1\12\1\0\11\12"+
    "\50\0\1\75\65\0\1\76\65\0\1\77\33\0\1\100"+
    "\66\0\1\101\66\0\1\102\2\0\1\11\1\52\1\11"+
    "\2\52\2\0\1\11\1\103\65\0\1\104\1\61\64\0"+
    "\1\105\73\0\1\106\62\0\1\107\52\0\5\57\1\110"+
    "\1\111\1\57\2\0\13\110\1\0\1\111\1\0\1\110"+
    "\1\0\11\110\22\0\2\60\2\0\62\60\12\112\1\113"+
    "\53\112\6\0\3\12\2\0\7\12\1\114\3\12\1\0"+
    "\1\12\1\0\1\12\1\0\11\12\30\0\3\12\2\0"+
    "\4\12\1\115\6\12\1\0\1\12\1\0\1\12\1\0"+
    "\11\12\30\0\3\12\2\0\4\12\1\116\6\12\1\0"+
    "\1\12\1\0\1\12\1\0\11\12\30\0\3\12\2\0"+
    "\3\12\1\117\7\12\1\0\1\12\1\0\1\12\1\0"+
    "\11\12\30\0\3\12\2\0\13\12\1\0\1\12\1\0"+
    "\1\12\1\0\5\12\1\120\3\12\51\0\1\121\2\0"+
    "\1\122\13\0\1\122\37\0\1\70\6\0\1\71\1\0"+
    "\1\70\42\0\3\12\2\0\4\12\1\123\6\12\1\0"+
    "\1\12\1\0\1\12\1\0\1\124\10\12\30\0\3\12"+
    "\2\0\13\12\1\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\125\7\12\30\0\3\12\2\0\13\12\1\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\126\7\12\33\0\1\127"+
    "\54\0\1\104\1\130\2\131\1\104\1\130\2\104\1\130"+
    "\55\104\2\105\2\4\62\105\16\0\1\132\74\0\1\133"+
    "\41\0\1\134\1\135\1\134\1\136\1\135\1\110\1\111"+
    "\1\137\2\0\13\110\1\0\1\111\1\0\1\110\1\0"+
    "\11\110\30\0\1\110\2\111\2\0\13\110\1\0\1\111"+
    "\1\0\1\110\1\0\11\110\22\0\12\112\1\140\53\112"+
    "\11\141\1\142\1\113\53\141\6\0\3\12\2\0\13\12"+
    "\1\0\1\12\1\0\1\12\1\0\2\12\1\143\6\12"+
    "\30\0\3\12\2\0\4\12\1\144\6\12\1\0\1\12"+
    "\1\0\1\12\1\0\11\12\30\0\3\12\2\0\5\12"+
    "\1\145\5\12\1\0\1\12\1\0\1\12\1\0\11\12"+
    "\30\0\3\12\2\0\5\12\1\146\5\12\1\0\1\12"+
    "\1\0\1\12\1\0\11\12\51\0\1\121\44\0\3\12"+
    "\2\0\13\12\1\0\1\12\1\0\1\12\1\0\5\12"+
    "\1\147\3\12\30\0\3\12\2\0\13\12\1\0\1\12"+
    "\1\0\1\12\1\0\10\12\1\150\22\0\1\127\1\151"+
    "\2\131\1\127\1\151\2\127\1\151\55\127\1\104\1\130"+
    "\2\131\2\130\1\152\1\104\1\130\2\104\1\153\5\152"+
    "\1\154\4\152\3\104\1\152\1\104\11\152\22\104\2\0"+
    "\1\131\1\0\2\131\1\155\2\0\1\103\1\0\1\156"+
    "\5\155\1\157\4\155\3\0\1\155\1\0\11\155\37\0"+
    "\1\160\74\0\1\161\42\0\1\134\1\135\1\134\1\136"+
    "\1\135\2\0\1\134\55\0\11\112\1\162\1\140\53\112"+
    "\12\141\1\163\53\141\6\0\3\12\2\0\5\12\1\164"+
    "\5\12\1\0\1\12\1\0\1\12\1\0\11\12\22\0"+
    "\1\127\1\151\2\131\2\151\1\165\1\127\1\151\2\127"+
    "\1\166\5\165\1\167\4\165\3\127\1\165\1\127\11\165"+
    "\22\127\1\104\1\170\2\171\1\172\1\170\2\152\1\173"+
    "\2\104\13\152\1\174\1\152\1\104\1\152\1\104\11\152"+
    "\23\104\1\170\2\171\1\172\1\170\2\152\1\173\2\104"+
    "\1\152\1\175\11\152\1\174\1\152\1\104\1\152\1\104"+
    "\11\152\23\104\1\170\2\171\1\172\1\170\2\152\1\173"+
    "\2\104\3\152\1\176\7\152\1\174\1\152\1\104\1\152"+
    "\1\104\11\152\22\104\1\0\5\177\3\155\2\0\13\155"+
    "\1\200\1\155\1\0\1\155\1\0\11\155\23\0\5\177"+
    "\3\155\2\0\1\155\1\201\11\155\1\200\1\155\1\0"+
    "\1\155\1\0\11\155\23\0\5\177\3\155\2\0\3\155"+
    "\1\202\7\155\1\200\1\155\1\0\1\155\1\0\11\155"+
    "\36\0\1\203\74\0\1\204\42\0\11\141\1\142\1\163"+
    "\53\141\1\127\1\205\2\171\1\206\1\205\2\165\1\207"+
    "\2\127\13\165\1\210\1\165\1\127\1\165\1\127\11\165"+
    "\23\127\1\205\2\171\1\206\1\205\2\165\1\207\2\127"+
    "\1\165\1\211\11\165\1\210\1\165\1\127\1\165\1\127"+
    "\11\165\23\127\1\205\2\171\1\206\1\205\2\165\1\207"+
    "\2\127\3\165\1\212\7\165\1\210\1\165\1\127\1\165"+
    "\1\127\11\165\22\127\1\104\1\170\2\171\2\170\1\152"+
    "\1\104\1\170\2\104\1\153\5\152\1\154\4\152\1\174"+
    "\2\104\1\152\1\104\11\152\22\104\1\0\1\177\1\171"+
    "\1\177\2\171\1\155\1\0\1\177\1\103\1\0\1\156"+
    "\5\155\1\157\4\155\1\200\2\0\1\155\1\0\11\155"+
    "\22\0\1\104\1\170\2\171\1\172\1\170\2\104\1\170"+
    "\15\104\1\174\40\104\1\170\2\171\2\170\2\152\1\173"+
    "\2\104\1\153\5\152\1\154\4\152\1\174\1\152\1\104"+
    "\1\152\1\104\11\152\23\104\1\170\2\171\1\172\1\170"+
    "\2\152\1\173\2\104\2\152\1\213\10\152\1\174\1\152"+
    "\1\104\1\152\1\104\11\152\23\104\1\170\2\171\1\172"+
    "\1\170\2\152\1\173\2\104\7\152\1\214\3\152\1\174"+
    "\1\152\1\104\1\152\1\104\11\152\22\104\1\0\5\177"+
    "\2\0\1\177\15\0\1\200\40\0\5\177\3\155\2\0"+
    "\2\155\1\215\10\155\1\200\1\155\1\0\1\155\1\0"+
    "\11\155\23\0\5\177\3\155\2\0\7\155\1\216\3\155"+
    "\1\200\1\155\1\0\1\155\1\0\11\155\35\0\1\136"+
    "\74\0\1\217\43\0\1\127\1\205\2\171\2\205\1\165"+
    "\1\127\1\205\2\127\1\166\5\165\1\167\4\165\1\210"+
    "\2\127\1\165\1\127\11\165\23\127\1\205\2\171\1\206"+
    "\1\205\2\127\1\205\15\127\1\210\40\127\1\205\2\171"+
    "\2\205\2\165\1\207\2\127\1\166\5\165\1\167\4\165"+
    "\1\210\1\165\1\127\1\165\1\127\11\165\23\127\1\205"+
    "\2\171\1\206\1\205\2\165\1\207\2\127\2\165\1\220"+
    "\10\165\1\210\1\165\1\127\1\165\1\127\11\165\23\127"+
    "\1\205\2\171\1\206\1\205\2\165\1\207\2\127\7\165"+
    "\1\221\3\165\1\210\1\165\1\127\1\165\1\127\11\165"+
    "\22\127\1\104\1\170\2\171\1\172\1\170\2\152\1\173"+
    "\2\104\3\152\1\222\7\152\1\174\1\152\1\104\1\152"+
    "\1\104\11\152\23\104\1\170\2\171\1\172\1\170\2\152"+
    "\1\173\2\104\10\152\1\223\2\152\1\174\1\152\1\104"+
    "\1\152\1\104\11\152\22\104\1\0\5\177\3\155\2\0"+
    "\3\155\1\224\7\155\1\200\1\155\1\0\1\155\1\0"+
    "\11\155\23\0\5\177\3\155\2\0\10\155\1\225\2\155"+
    "\1\200\1\155\1\0\1\155\1\0\11\155\40\0\1\226"+
    "\47\0\1\127\1\205\2\171\1\206\1\205\2\165\1\207"+
    "\2\127\3\165\1\227\7\165\1\210\1\165\1\127\1\165"+
    "\1\127\11\165\23\127\1\205\2\171\1\206\1\205\2\165"+
    "\1\207\2\127\10\165\1\230\2\165\1\210\1\165\1\127"+
    "\1\165\1\127\11\165\22\127\1\104\1\170\2\171\1\172"+
    "\1\170\2\152\1\173\2\104\4\152\1\231\6\152\1\174"+
    "\1\152\1\104\1\152\1\104\11\152\23\104\1\170\2\171"+
    "\1\172\1\170\2\152\1\173\2\104\11\152\1\232\1\152"+
    "\1\174\1\152\1\104\1\152\1\104\11\152\22\104\1\0"+
    "\5\177\3\155\2\0\4\155\1\233\6\155\1\200\1\155"+
    "\1\0\1\155\1\0\11\155\23\0\5\177\3\155\2\0"+
    "\11\155\1\234\1\155\1\200\1\155\1\0\1\155\1\0"+
    "\11\155\43\0\1\136\44\0\1\127\1\205\2\171\1\206"+
    "\1\205\2\165\1\207\2\127\4\165\1\235\6\165\1\210"+
    "\1\165\1\127\1\165\1\127\11\165\23\127\1\205\2\171"+
    "\1\206\1\205\2\165\1\207\2\127\11\165\1\236\1\165"+
    "\1\210\1\165\1\127\1\165\1\127\11\165\22\127\1\104"+
    "\1\170\2\171\1\172\1\170\2\152\1\173\2\104\5\152"+
    "\1\237\5\152\1\174\1\152\1\104\1\152\1\104\11\152"+
    "\23\104\1\170\2\171\1\172\1\170\2\152\1\173\2\104"+
    "\12\152\1\240\1\174\1\152\1\104\1\152\1\104\11\152"+
    "\22\104\1\0\5\177\3\155\2\0\5\155\1\241\5\155"+
    "\1\200\1\155\1\0\1\155\1\0\11\155\23\0\5\177"+
    "\3\155\2\0\12\155\1\242\1\200\1\155\1\0\1\155"+
    "\1\0\11\155\22\0\1\127\1\205\2\171\1\206\1\205"+
    "\2\165\1\207\2\127\5\165\1\243\5\165\1\210\1\165"+
    "\1\127\1\165\1\127\11\165\23\127\1\205\2\171\1\206"+
    "\1\205\2\165\1\207\2\127\12\165\1\244\1\210\1\165"+
    "\1\127\1\165\1\127\11\165\22\127\1\104\1\170\2\171"+
    "\1\172\1\170\2\152\1\173\2\104\1\152\1\245\11\152"+
    "\1\174\1\152\1\104\1\152\1\104\11\152\22\104\1\0"+
    "\5\177\3\155\2\0\1\155\1\246\11\155\1\200\1\155"+
    "\1\0\1\155\1\0\11\155\22\0\1\127\1\205\2\171"+
    "\1\206\1\205\2\165\1\207\2\127\1\165\1\247\11\165"+
    "\1\210\1\165\1\127\1\165\1\127\11\165\22\127\1\104"+
    "\1\170\2\171\1\172\1\170\2\152\1\173\2\104\7\152"+
    "\1\237\3\152\1\174\1\152\1\104\1\152\1\104\11\152"+
    "\22\104\1\0\5\177\3\155\2\0\7\155\1\241\3\155"+
    "\1\200\1\155\1\0\1\155\1\0\11\155\22\0\1\127"+
    "\1\205\2\171\1\206\1\205\2\165\1\207\2\127\7\165"+
    "\1\243\3\165\1\210\1\165\1\127\1\165\1\127\11\165"+
    "\22\127";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6588];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\5\1\1\11\6\1\1\11\3\1\14\11"+
    "\5\1\1\11\3\1\4\0\7\1\1\11\1\0\4\1"+
    "\6\11\1\0\2\1\4\0\10\1\1\0\4\1\1\0"+
    "\1\1\3\0\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\6\1\1\0\3\1\5\0\1\11\1\0\1\1"+
    "\3\0\1\1\1\0\5\1\1\0\1\11\7\0\1\1"+
    "\2\0\2\1\5\0\2\1\5\0\2\1\4\0\3\1"+
    "\1\0\1\1\1\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  DccLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 47: break;
          case 2: 
            { return DccTypes.LINE_BREAK;
            } 
            // fall through
          case 48: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 49: break;
          case 4: 
            { return DccTypes.IDENTIFIER;
            } 
            // fall through
          case 50: break;
          case 5: 
            { return DccTypes.DIV;
            } 
            // fall through
          case 51: break;
          case 6: 
            { return DccTypes.MUL;
            } 
            // fall through
          case 52: break;
          case 7: 
            { return DccTypes.EQUALS;
            } 
            // fall through
          case 53: break;
          case 8: 
            { return DccTypes.NUMBER_LITERAL;
            } 
            // fall through
          case 54: break;
          case 9: 
            { return DccTypes.DOT;
            } 
            // fall through
          case 55: break;
          case 10: 
            { return DccTypes.PLUS;
            } 
            // fall through
          case 56: break;
          case 11: 
            { return DccTypes.COMMA;
            } 
            // fall through
          case 57: break;
          case 12: 
            { return DccTypes.SEMICOLON;
            } 
            // fall through
          case 58: break;
          case 13: 
            { return DccTypes.MINUS;
            } 
            // fall through
          case 59: break;
          case 14: 
            { return DccTypes.PERC;
            } 
            // fall through
          case 60: break;
          case 15: 
            { return DccTypes.COLON;
            } 
            // fall through
          case 61: break;
          case 16: 
            { return DccTypes.LPARENTH;
            } 
            // fall through
          case 62: break;
          case 17: 
            { return DccTypes.RPARENTH;
            } 
            // fall through
          case 63: break;
          case 18: 
            { return DccTypes.LBRACE;
            } 
            // fall through
          case 64: break;
          case 19: 
            { return DccTypes.RBRACE;
            } 
            // fall through
          case 65: break;
          case 20: 
            { return DccTypes.LBRACKET;
            } 
            // fall through
          case 66: break;
          case 21: 
            { return DccTypes.RBRACKET;
            } 
            // fall through
          case 67: break;
          case 22: 
            { return DccTypes.HASH;
            } 
            // fall through
          case 68: break;
          case 23: 
            { return DccTypes.LT;
            } 
            // fall through
          case 69: break;
          case 24: 
            { return DccTypes.GT;
            } 
            // fall through
          case 70: break;
          case 25: 
            { return DccTypes.EXCL;
            } 
            // fall through
          case 71: break;
          case 26: 
            { return DccTypes.NULLABLE;
            } 
            // fall through
          case 72: break;
          case 27: 
            { return DccTypes.END_OF_LINE_COMMENT;
            } 
            // fall through
          case 73: break;
          case 28: 
            { return DccTypes.C_STYLE_COMMENT;
            } 
            // fall through
          case 74: break;
          case 29: 
            { return DccTypes.EQ;
            } 
            // fall through
          case 75: break;
          case 30: 
            { return DccTypes.LE;
            } 
            // fall through
          case 76: break;
          case 31: 
            { return DccTypes.GE;
            } 
            // fall through
          case 77: break;
          case 32: 
            { return DccTypes.NE;
            } 
            // fall through
          case 78: break;
          case 33: 
            { return DccTypes.NOTNULL;
            } 
            // fall through
          case 79: break;
          case 34: 
            { return DccTypes.AND;
            } 
            // fall through
          case 80: break;
          case 35: 
            { return DccTypes.OR;
            } 
            // fall through
          case 81: break;
          case 36: 
            { return DccTypes.DOC_COMMENT;
            } 
            // fall through
          case 82: break;
          case 37: 
            { return DccTypes.FUN_KEYWORD;
            } 
            // fall through
          case 83: break;
          case 38: 
            { return DccTypes.VAL_KEYWORD;
            } 
            // fall through
          case 84: break;
          case 39: 
            { return DccTypes.VAR_KEYWORD;
            } 
            // fall through
          case 85: break;
          case 40: 
            { return DccTypes.NULL_KEYWORD;
            } 
            // fall through
          case 86: break;
          case 41: 
            { return DccTypes.TRUE_KEYWORD;
            } 
            // fall through
          case 87: break;
          case 42: 
            { return DccTypes.TYPE_KEYWORD;
            } 
            // fall through
          case 88: break;
          case 43: 
            { return DccTypes.HEAP_KEYWORD;
            } 
            // fall through
          case 89: break;
          case 44: 
            { return DccTypes.WEAK_KEYWORD;
            } 
            // fall through
          case 90: break;
          case 45: 
            { return DccTypes.FALSE_KEYWORD;
            } 
            // fall through
          case 91: break;
          case 46: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 3;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 4;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return DccTypes.BLOCK_COMMENT;
            } 
            // fall through
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
